{"version":3,"sources":["./src/app/shared/modules/home/home-routing.module.ts","./src/app/components/customer/customer-edit/customer-edit.component.ts","./src/app/components/customer/customer-edit/customer-edit.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/environments/environment.ts","./src/app/shared/modules/customer/customer.module.ts","./src/app/services/notifier/notifier.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/shared/modules/material/material.module.ts","./src/app/shared/modules/customer/customer-routing.module.ts","./src/app/app.module.ts","./src/app/services/utils/error-handle.service.ts","./src/app/components/customer/customer-table-list/customer-table-list.component.ts","./src/app/components/customer/customer-table-list/customer-table-list.component.html","./src/app/components/navbar/navbar.component.ts","./src/app/components/navbar/navbar.component.html","./src/app/components/notifier/notifier.component.ts","./src/app/components/notifier/notifier.component.html","./src/app/services/customer/customer.service.ts","./src/app/app-routing.module.ts","./src/app/shared/modules/home/home.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from 'src/app/home/home.component';\n\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomeRoutingModule { }\n","import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { CustomerService } from 'src/app/services/customer/customer.service';\nimport { NotifierService } from 'src/app/services/notifier/notifier.service';\nimport { ErrorHandleService } from 'src/app/services/utils/error-handle.service';\nimport { Customer } from 'src/app/shared/models/customer';\n\n@Component({\n  selector: 'app-customer-edit',\n  templateUrl: './customer-edit.component.html',\n  styleUrls: ['./customer-edit.component.scss']\n})\nexport class CustomerEditComponent implements OnInit {\n\n  customer: Customer | undefined = undefined;\n  customerId!: number;\n  isCustomerLoading: boolean = true;\n\n  form!: FormGroup;\n\n  constructor(\n    private route: ActivatedRoute,\n    private location: Location,\n    private errorHandleService: ErrorHandleService,\n    private customeService: CustomerService,\n    private fb: FormBuilder,\n    private notifierService: NotifierService) { }\n\n  ngOnInit(): void {\n    this.customerId = Number(this.route.snapshot.paramMap.get('id'));\n    this.getCustomer();\n    this.buildForm();\n  }\n\n  buildForm(): void {\n    this.form = this.fb.group({\n      id: [null],\n      name: [null, Validators.required],\n      age: [null, [Validators.required, Validators.minLength(1), Validators.maxLength(3)]],\n      city: [null, Validators.required]\n    })\n  }\n\n  patchForm(customer: Customer): void {\n    this.form.patchValue(customer as Customer)\n  }\n  // filter current customer provided by `getCustomer` function, based on id retrived from url params\n  filterDesiredCustomer(customers: Customer[]): Customer | undefined {\n    return customers.find((customer: Customer) => customer.id == this.customerId)\n  }\n  getCustomer(): void {\n    this.customeService.getCustomers()\n      .pipe(take(1))\n      .subscribe((customers: Customer[]) => {\n        this.customer = this.filterDesiredCustomer(customers);\n        this.patchForm(this.customer as Customer);\n        this.isCustomerLoading = false\n      }, (error: any) => {\n        this.isCustomerLoading = false\n        this.notifierService.showNotification(this.errorHandleService.handleError(error), 'Fechar', 'error')\n      })\n  }\n\n  updateCustomer(form: FormGroup): void {\n    if (form.valid) {\n      this.customeService.updateCustomer(form.value)\n        .pipe(take(1))\n        .subscribe((customer: Customer) => {\n          this.notifierService.showNotification(`Cliente ${form.value.name} atualizado com sucesso`, 'Fechar', 'success')\n          this.location.back();\n        }, error => this.notifierService.showNotification(this.errorHandleService.handleError(error), 'Fechar', 'error'))\n    }\n  }\n\n  cancelUpdateCustomerAction(): void {\n    this.location.back();\n  }\n}\n","<mat-card-content>\n    <mat-card *ngIf=\"!isCustomerLoading\">\n        <ngx-avatar initialsSize=\"2\" class=\"my-avatar\" name=\"{{ customer?.name }}\" size=\"130\">\n        </ngx-avatar>\n        <form [formGroup]=\"form\">\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Nome</mat-label>\n                <input matInput formControlName=\"name\">\n                <mat-error *ngIf=\"form.get('name')?.errors?.required\">Esse campo é obrigatório</mat-error>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Idade</mat-label>\n                <input matInput formControlName=\"age\">\n                <mat-error *ngIf=\"form.get('age')?.errors?.required\">Esse campo é obrigatório</mat-error>\n                <mat-error *ngIf=\"form.get('age')?.errors\">Digite uma idade válida</mat-error> \n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Cidade</mat-label>\n                <input matInput formControlName=\"city\">\n                <mat-error *ngIf=\"form.get('city')?.errors?.required\">Esse campo é obrigatório</mat-error>\n            </mat-form-field>\n            <mat-card-actions>\n                <button mat-raised-button (click)=\"cancelUpdateCustomerAction()\">Cancelar</button>\n                <button [disabled]=\"form.get('age')?.errors != null\" mat-raised-button\n                    (click)=\"updateCustomer(form)\" color=\"primary\">Salvar</button>\n            </mat-card-actions>\n        </form>\n    </mat-card>\n    <mat-card *ngIf=\"isCustomerLoading\">\n        <mat-spinner [diameter]=\"80\"></mat-spinner>\n    </mat-card>\n\n</mat-card-content>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-card-content>\n    <app-customer-table-list></app-customer-table-list>\n</mat-card-content>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { AvatarModule } from 'ngx-avatar';\nimport { CustomerEditComponent } from 'src/app/components/customer/customer-edit/customer-edit.component';\n\nimport { CustomerRoutingModule } from './customer-routing.module';\n\n@NgModule({\n  declarations: [CustomerEditComponent],\n  imports: [\n    CommonModule,\n    CustomerRoutingModule,\n    MatInputModule,\n    MatButtonModule,\n    MatProgressSpinnerModule,\n    MatCardModule,\n    AvatarModule,\n    MatFormFieldModule,\n    FormsModule,\n    ReactiveFormsModule\n  ]\n})\nexport class CustomerModule { }\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { NotifierComponent } from 'src/app/components/notifier/notifier.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotifierService {\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  showNotification(displayMessage: string, buttonText: string, messageType: 'error' | 'success' | 'warn'){\n    this.snackBar.openFromComponent(NotifierComponent,{\n      data: {\n        message: displayMessage,\n        buttonText: buttonText,\n        type: messageType\n      },\n      duration: 1000,\n      horizontalPosition: \"right\",\n      verticalPosition: \"top\",\n      panelClass: messageType,\n    })\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'interview';\n}\n","<app-navbar></app-navbar>\n<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n@NgModule({\n  exports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatCardModule,\n    MatDialogModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatTooltipModule,\n    MatSnackBarModule,\n    MatTableModule,\n    MatProgressBarModule,\n    MatPaginatorModule,\n    MatSortModule\n  ]\n})\nexport class MaterialModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CustomerEditComponent } from 'src/app/components/customer/customer-edit/customer-edit.component';\n\nconst routes: Routes = [\n  { path: 'customer/:id', component: CustomerEditComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CustomerRoutingModule { }\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { NotifierComponent } from './components/notifier/notifier.component';\nimport { CustomerModule } from './shared/modules/customer/customer.module';\nimport { HomeModule } from './shared/modules/home/home.module';\nimport { MaterialModule } from './shared/modules/material/material.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    NotifierComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HomeModule,\n    CustomerModule,\n    MaterialModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandleService {\n\n  constructor() { }\n\n  handleError(err: any) {\n    let errorMessage: string;\n    if (err.error instanceof ErrorEvent) {\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      errorMessage = `Backend returned code ${err.status}: ${err.body?.error}`;\n    }\n    return errorMessage;\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { take } from 'rxjs/operators';\nimport { CustomerService } from 'src/app/services/customer/customer.service';\nimport { NotifierService } from 'src/app/services/notifier/notifier.service';\nimport { ErrorHandleService } from 'src/app/services/utils/error-handle.service';\nimport { Customer } from 'src/app/shared/models/customer';\n\n\n@Component({\n  selector: 'app-customer-table-list',\n  templateUrl: './customer-table-list.component.html',\n  styleUrls: ['./customer-table-list.component.scss']\n})\nexport class CustomerTableListComponent implements OnInit {\n\n  customers: Customer[] = []\n  customersData: MatTableDataSource<Customer> = new MatTableDataSource<Customer>();\n\n  displayedColumns: string[] = ['id', 'name', 'age', 'city', 'edit'];\n  dataSource = new MatTableDataSource();\n\n\n  @ViewChild(MatSort) sort: MatSort | null = null;\n  @ViewChild(MatPaginator) paginator: MatPaginator | null = null;\n  isCustomerLoading: boolean = true;\n  constructor(private customeService: CustomerService,\n    private notifierService: NotifierService,\n    private errorHandleService: ErrorHandleService\n  ) { }\n\n  ngOnInit(): void {\n    this.getCustomers();\n  }\n\n  // fill data source properties with all the provided customer\n  fillTable(customers: Customer[]): void {\n    this.customersData = new MatTableDataSource<Customer>(customers)\n    this.customersData.sort = this.sort\n    this.customersData.paginator = this.paginator\n  }\n  // get all customers \n  getCustomers(): void {\n    this.customeService.getCustomers()\n      // operator for auto unsubscribe\n      .pipe(take(1))\n      .subscribe((customers: Customer[]) => {\n        this.customers = customers\n        this.isCustomerLoading = false;\n        this.fillTable(customers)\n      }, error => {\n        this.isCustomerLoading = false\n        this.notifierService.showNotification(this.errorHandleService.handleError(error), 'Fechar', 'error')\n      })\n  }\n\n  //filter customer \n  applyFilter(filteredValue: any): void {\n    this.customersData.filter = filteredValue.value.trim().toLocaleLowerCase();\n  }\n}\n","<mat-card-content class=\"table-list\">\n    <div class=\"filter-input\">\n        <mat-form-field class=\"example-form-field\" appearance=\"outline\">\n            <mat-label>Filtrar</mat-label>\n            <input matInput (keyup)=\"applyFilter($event.target)\" placeholder=\"digite o id, nome, idade ou cidade\">\n        </mat-form-field>\n    </div>\n\n    <table mat-table [dataSource]=\"customersData\" matSort class=\"mat-elevation-z8\">\n        <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Ordenar por id\">\n                No.\n            </th>\n            <td mat-cell *matCellDef=\"let customer\"> {{customer.id}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Ordenar por nome\">\n                Nome\n            </th>\n            <td mat-cell *matCellDef=\"let customer\" class=\"name-cell\">\n                {{customer.name}}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"city\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Ordenar por cidade\">\n                Cidade\n            </th>\n            <td mat-cell *matCellDef=\"let customer\"> {{customer.city}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"age\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Ordenar por idade\">\n                Idade\n            </th>\n            <td mat-cell *matCellDef=\"let customer\"> {{customer.age}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"edit\">\n            <th mat-header-cell *matHeaderCellDef>\n                Editar\n            </th>\n            <td mat-cell *matCellDef=\"let customer\" [routerLink]=\"['customer', customer.id]\">\n                <mat-icon>edit</mat-icon>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n    <div *ngIf=\"isCustomerLoading\" class=\"spinner\">\n        <mat-spinner [diameter]=\"80\"></mat-spinner>\n    </div>\n    <mat-paginator [pageSizeOptions]=\"[10]\" showFirstLastButtons aria-label=\"Selecione a página de clientes\">\n    </mat-paginator>\n</mat-card-content>\n\n<mat-card-content class=\"cards-list\">\n\n    <div class=\"filter-input\">\n        <mat-form-field class=\"example-form-field\" appearance=\"outline\">\n            <mat-label>Filtrar</mat-label>\n            <input matInput (keyup)=\"applyFilter($event.target)\" placeholder=\"digite o id, nome, idade ou cidade\">\n        </mat-form-field>\n    </div>\n\n    <div class=\"cards-list-wrapper\">\n        <mat-card *ngFor=\"let customer of customersData.filteredData\" aria-label=\"informação do cliente\"\n            class=\"card-list-content\" [routerLink]=\"['customer', customer.id]\">\n            <ngx-avatar initialsSize=\"2\" class=\"my-avatar\" name=\"{{ customer.name }}\" size=\"40\">\n            </ngx-avatar>\n            <span> {{ customer.name }} </span>\n            <span> {{ customer.city }} </span>\n            <span> {{ customer.age }} </span>\n        </mat-card>\n    </div>\n</mat-card-content>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar color=\"primary\">\n    <span>Neoprospecta</span>\n</mat-toolbar>","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-notifier',\n  templateUrl: './notifier.component.html',\n  styleUrls: ['./notifier.component.scss']\n})\nexport class NotifierComponent implements OnInit {\n\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any,\n  public snackBarRef: MatSnackBarRef<NotifierComponent>) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"content-style\">\n    <div *ngIf=\"data.type == 'error'\">\n        <mat-icon>error</mat-icon>\n    </div>\n    <div *ngIf=\"data.type == 'success'\">\n        <mat-icon>check_circle</mat-icon>\n    </div>\n    <div *ngIf=\"data.type == 'warn'\">\n        <mat-icon>warning</mat-icon>\n    </div>\n    <p>{{data.message}}</p>\n    <div>\n        <button mat-icon-button (click)=\"snackBarRef.dismiss()\"><mat-icon>close</mat-icon></button>\n    </div>\n</div>","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Customer } from '../../shared/models/customer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n  private readonly URL = \"http://private-92a969-processoseletivo1.apiary-mock.com/customers\"\n  constructor(private http: HttpClient) { }\n\n  getCustomers(): Observable<Customer[]> {\n    return this.http.get<Customer[]>(this.URL)\n  }\n   updateCustomer(customer: Customer): Observable<Customer> {\n     return this.http.put<Customer>(`${this.URL}/${customer.id}`, customer)\n   }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\n\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', component: HomeComponent },\n  {\n    path: 'home',\n    loadChildren: () => import('./shared/modules/home/home.module')\n      .then(m => m.HomeModule)\n  },\n  {\n    path: 'customer',\n    loadChildren: () => import('./shared/modules/customer/customer.module')\n      .then(m => m.CustomerModule)\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AvatarModule } from 'ngx-avatar';\nimport { CustomerTableListComponent } from 'src/app/components/customer/customer-table-list/customer-table-list.component';\nimport { HomeComponent } from 'src/app/home/home.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { MaterialModule } from '../material/material.module';\nimport { HomeRoutingModule } from './home-routing.module';\nimport { MatInputModule } from '@angular/material/input';\n\n\n@NgModule({\n  declarations: [CustomerTableListComponent, HomeComponent],\n  imports: [\n    CommonModule,\n    HomeRoutingModule,\n    BrowserModule,\n    MaterialModule,\n    AvatarModule,\n    MatInputModule,\n    MatProgressSpinnerModule\n  ]\n})\nexport class HomeModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}